/*
 * test case 0:
 *     zones = []
 *     predicate = {}
 *     decomps = []
 */
/* start script 0 */
syscall:::return
{
	@ = count();
}

/* end script 0 */

/*
 * test case 1:
 *     zones = ["zone1","zone2"]
 *     predicate = {"gt":["celes",10]}
 *     decomps = []
 */
/* start script 0 */
#pragma D option zone=zone1

syscall:::entry
{
	self->celes0 = vtimestamp;
}

syscall:::return
/((((((self->celes0) != NULL)))) && (((zonename == "zone1") || (zonename == "zone2"))) && ((timestamp - self->celes0) > 10))/{
	@ = count();
}

syscall:::return
{
	(self->celes0) = 0;
}

/* end script 0 */

/* start script 1 */
#pragma D option zone=zone2

syscall:::entry
{
	self->celes0 = vtimestamp;
}

syscall:::return
/((((((self->celes0) != NULL)))) && (((zonename == "zone1") || (zonename == "zone2"))) && ((timestamp - self->celes0) > 10))/{
	@ = count();
}

syscall:::return
{
	(self->celes0) = 0;
}

/* end script 1 */

/*
 * test case 2:
 *     zones = ["zone1","zone2","zone3","zone4","zone5"]
 *     predicate = {"gt":["celes",10]}
 *     decomps = []
 */
/* start script 0 */
syscall:::entry
{
	self->celes0 = vtimestamp;
}

syscall:::return
/((((((self->celes0) != NULL)))) && (((zonename == "zone1") || (zonename == "zone2") || (zonename == "zone3") || (zonename == "zone4") || (zonename == "zone5"))) && ((timestamp - self->celes0) > 10))/{
	@ = count();
}

syscall:::return
{
	(self->celes0) = 0;
}

/* end script 0 */

/*
 * test case 3:
 *     zones = []
 *     predicate = {}
 *     decomps = ["celes"]
 */
/* start script 0 */
syscall:::entry
{
	self->celes0 = vtimestamp;
}

syscall:::return
/((((((self->celes0) != NULL)))))/{
	@ = quantize((timestamp - self->celes0));
}

syscall:::return
{
	(self->celes0) = 0;
}

/* end script 0 */

/*
 * test case 4:
 *     zones = []
 *     predicate = {}
 *     decomps = ["terra"]
 */
/* start script 0 */
syscall:::return
{
	@[(zonename)] = count();
}

/* end script 0 */

/*
 * test case 5:
 *     zones = []
 *     predicate = {}
 *     decomps = ["celes","terra"]
 */
/* start script 0 */
syscall:::entry
{
	self->celes0 = vtimestamp;
}

syscall:::return
/((((((self->celes0) != NULL)))))/{
	@[(zonename)] = quantize((timestamp - self->celes0));
}

syscall:::return
{
	(self->celes0) = 0;
}

/* end script 0 */

/*
 * test case 6:
 *     zones = []
 *     predicate = {"gt":["celes","300"]}
 *     decomps = ["celes"]
 */
/* start script 0 */
syscall:::entry
{
	self->celes0 = vtimestamp;
}

syscall:::return
/((((((self->celes0) != NULL)))) && ((timestamp - self->celes0) > "300"))/{
	@ = quantize((timestamp - self->celes0));
}

syscall:::return
{
	(self->celes0) = 0;
}

/* end script 0 */

/*
 * test case 7:
 *     zones = []
 *     predicate = {"gt":["celes","300"]}
 *     decomps = []
 */
/* start script 0 */
syscall:::entry
{
	self->celes0 = vtimestamp;
}

syscall:::return
/((((((self->celes0) != NULL)))) && ((timestamp - self->celes0) > "300"))/{
	@ = count();
}

syscall:::return
{
	(self->celes0) = 0;
}

/* end script 0 */

/*
 * test case 8:
 *     zones = []
 *     predicate = {"or":[{"eq":["terra","global"]},{"eq":["terra","adm"]}]}
 *     decomps = []
 */
/* start script 0 */
syscall:::return
/((((zonename) == "global") || ((zonename) == "adm")))/{
	@ = count();
}

/* end script 0 */

